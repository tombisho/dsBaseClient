schedules:
  - cron: "1 23 * * *"
    displayName: Nightly build
    branches:
     include:
      - master
    always: true

jobs:
- job: DataSHIELD_CI

  timeoutInMinutes: 180

  pool:
    vmImage: 'Ubuntu 16.04'

  variables:
    datetime:    $[format('{0:yyyyMMddHHmmss}', pipeline.startTime)]
    repoName:    $(Build.Repository.Name)
    projectName: 'dsBaseClient'
    branchName:  $(Build.SourceBranchName)


  steps:
  - bash: |
      echo "options(Ncpus=2)" >> ~/.Rprofile
    displayName: 'Tweak local R env'
  
  - bash: |
      echo $(branchName)
      echo $(projectName)
      echo $(repoName)
      # Purge the default mysql installed on the VM as it is incompatible with our stuff.
      sudo service mysql stop
      sudo apt-get update
      sudo apt-get remove --purge mysql-client mysql-server mysql-common -y
      sudo apt-get purge mysql-client mysql-server mysql-common -y
      sudo apt-get autoremove -y
      sudo apt-get autoclean -y
      sudo rm -rf /var/lib/mysql/

      wget -nv https://apt.puppetlabs.com/puppet5-release-xenial.deb
      sudo dpkg -i puppet5-release-xenial.deb
      sudo apt-get install -qq -f
      sudo apt-get update
      sudo rm -f puppet5-release-xenial.deb

      sudo apt-get install puppet-agent -y

      sudo /opt/puppetlabs/puppet/bin/gem install r10k

      echo -n "Puppet version: "
      /opt/puppetlabs/bin/puppet --version
      /opt/puppetlabs/puppet/bin/r10k version

      git clone -b v6.0-dev https://github.com/datashield/datashield-infrastructure.git ../datashield-infrastructure
      pushd ../datashield-infrastructure/puppet/environments/datashield_azurepipelines && sudo /opt/puppetlabs/puppet/bin/r10k puppetfile install && popd
      sudo /opt/puppetlabs/bin/puppet apply azure-pipelines_site.pp --environment datashield_azurepipelines --environmentpath ../datashield-infrastructure/puppet/environments
    displayName: 'Install DataSHIELD server'

  - bash: |
      sudo apt-get install -qq libxml2-dev libcurl4-openssl-dev libssl-dev libgsl-dev -y
      sudo R -q -e "options(Ncpus=2);install.packages(c('devtools','metafor','fields','covr'), dependencies=TRUE)"
      sudo R -q -e "devtools::install_github(repo='datashield/DSI', ref='master', dependencies=TRUE)"
      sudo R -q -e "devtools::install_github(repo='datashield/DSOpal', ref='master', dependencies=TRUE)"
      sudo R -q -e "devtools::install_github(repo='datashield/DSLite', ref='master', dependencies=TRUE)"
    displayName: 'Install R client'

  - bash: |
      R -q -e "library('devtools'); devtools::check(args = c('--no-examples'))" | tee azure-pipelines_check.Rout
      grep --quiet "^0 errors" azure-pipelines_check.Rout && grep --quiet " 0 warnings" azure-pipelines_check.Rout && grep --quiet " 0 notes" azure-pipelines_check.Rout
    displayName: 'Devtools checks'
    condition: always()

  - bash: |
      #R -q -e "library('devtools'); devtools::test()" | tee azure-pipelines_test.Rout
      #grep --quiet "Failed:   0" azure-pipelines_test.Rout
    displayName: 'Devtools tests'
    condition: always()

  - bash: |
      ./checkDocumentationUpdated.sh
    displayName: 'Check documents'
    condition: always()

  - bash: |

      git config --global user.email "you@example.com"
      git config --global user.name "Azure pipeline"
      # Should look to see if can use the one downloaded by default and not cloning a fresh one.
      git clone -b $(branchName) https://datashield:$(GHPAT)@github.com/$(repoName).git $(projectName)
      cd $(projectName)
      # run the coverage tool and output to coveragelist.csv
      # testthat::testpackage uses a MultiReporter, comprised of a ProgressReporter and JunitReporter
      # R output and messages are redirected by sink() to test_console_output.txt
      # junit reporter output is to test_results.xml
      sudo R -q -e 'library(covr);write.csv(coverage_to_list(covr::package_coverage(type = c("none"), code = c('"'"'library(testthat); output_file <- file("test_console_output.txt"); sink(output_file); sink(output_file, type = "message"); library(testthat); junit_rep <- JunitReporter$new(file = "test_results.xml"); progress_rep <- ProgressReporter$new(max_failures = 999999); multi_rep <- MultiReporter$new(reporters = list(progress_rep, junit_rep)); testthat::test_package("$(projectName)", reporter = multi_rep, stop_on_failure = FALSE)'"'"'))),"../coveragelist.csv")'
      # display the test console output
      cat test_console_output.txt
      mv test_results.xml ../
      mv test_console_output.txt ../
      cd ../
      grep --quiet "Failed:   0" test_console_output.txt
    displayName: 'Code coverage and JUnit report output'
    condition: always()

  - bash: |
      git clone https://datashield:$(GHPAT)@github.com/datashield/testStatus.git testStatus

      # Make the directories if they dont already exist
      mkdir --parents testStatus/logs/$(projectName)/$(branchName)
      mkdir --parents testStatus/docs/$(projectName)/$(branchName)/latest

      cp coveragelist.csv testStatus/logs/$(projectName)/$(branchName)/
      cp coveragelist.csv testStatus/logs/$(projectName)/$(branchName)/$(datetime).csv

      cp test_results.xml testStatus/logs/$(projectName)/$(branchName)/
      cp test_results.xml testStatus/logs/$(projectName)/$(branchName)/$(datetime).xml

      testStatus/source/status.py testStatus/logs/$(projectName)/$(branchName)/$(datetime).xml testStatus/logs/$(projectName)/$(branchName)/$(datetime).csv status.html $(projectName) $(projectName) $(branchName)
      cd testStatus
      cp ../status.html docs/$(projectName)/$(branchName)/latest/index.html

      git add logs/$(projectName)/$(branchName)/coveragelist.csv
      git add logs/$(projectName)/$(branchName)/test_results.xml
      git add logs/$(projectName)/$(branchName)/$(datetime).xml
      git add logs/$(projectName)/$(branchName)/$(datetime).csv
      git add docs/$(projectName)/$(branchName)/latest/index.html
      git commit -m "Test Status update for $(projectName)/$(branchName)"
      git push
      exit 0
    displayName: 'Parse test results'
    condition: always()

  - bash: |
      sudo apt install tree -y
      echo -n "#############################"
      echo -n "File tree: ##################"
      tree
      echo -n "#############################"
      echo -n "lscpu: ######################"
      lscpu
      echo -n "#############################"
      echo -n "env: ########################"
      env
      echo -n "#############################"
      echo -n "Rprofile: ###################"
      cat ~/.Rprofile
      echo -n "#############################"
    displayName: 'Environment info'
    condition: always()
